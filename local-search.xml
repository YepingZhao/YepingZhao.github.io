<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2025/07/02/My-New-Post/"/>
    <url>/2025/07/02/My-New-Post/</url>
    
    <content type="html"><![CDATA[<p>暂时无法在飞书文档外展示此内容</p><p>nohup<br>nohup 后台启动-综合使用</p><h1 id="后台执行test-sh文件，将标准日志输出到output-log文件中，将错误日志也输出到output-log文件中"><a href="#后台执行test-sh文件，将标准日志输出到output-log文件中，将错误日志也输出到output-log文件中" class="headerlink" title="后台执行test.sh文件，将标准日志输出到output.log文件中，将错误日志也输出到output.log文件中"></a>后台执行test.sh文件，将标准日志输出到output.log文件中，将错误日志也输出到output.log文件中</h1><p>nohup .&#x2F;test.sh &gt; output.log 2&gt;&amp;1 &amp;</p><h1 id="等同于"><a href="#等同于" class="headerlink" title="等同于"></a>等同于</h1><p>nohup .&#x2F;test.sh &gt; output.log 2&gt;output.log &amp;</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>nohup python .&#x2F;train.py &gt; train.log 2&gt;&amp;1 &amp;<br>nohup 后台启动(不生成日志)<br>#&#x2F;dev&#x2F;null 表示空设备文件。 如果不想输出任何的日志时，使用此参数 。<br>nohup .&#x2F;test.sh &gt;&#x2F;dev&#x2F;null &amp;<br>不停止服务，直接清空 nohup.out</p><h1 id="第1种："><a href="#第1种：" class="headerlink" title="第1种："></a>第1种：</h1><p>cat &#x2F;dev&#x2F;null &gt; nohup.out</p><h1 id="第2种："><a href="#第2种：" class="headerlink" title="第2种："></a>第2种：</h1><p>cp &#x2F;dev&#x2F;null nohup.out<br>Git<br>Git 初始化配置</p><h1 id="a、设置用户名："><a href="#a、设置用户名：" class="headerlink" title="a、设置用户名："></a>a、设置用户名：</h1><p>git config –global user.name “&lt;用户名&gt;”</p><h1 id="b、设置用户邮箱："><a href="#b、设置用户邮箱：" class="headerlink" title="b、设置用户邮箱："></a>b、设置用户邮箱：</h1><h1 id="注意：该配置会在github主页上显示谁提交了该文件"><a href="#注意：该配置会在github主页上显示谁提交了该文件" class="headerlink" title="注意：该配置会在github主页上显示谁提交了该文件"></a>注意：该配置会在github主页上显示谁提交了该文件</h1><p>git config –global user.email “&lt;电子邮件&gt;”</p><h1 id="c、配置ok之后，我们用如下命令来看看是否配置成功"><a href="#c、配置ok之后，我们用如下命令来看看是否配置成功" class="headerlink" title="c、配置ok之后，我们用如下命令来看看是否配置成功"></a>c、配置ok之后，我们用如下命令来看看是否配置成功</h1><p>git config –list<br>测试 SSH 连接<br>ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a></p><p>kill</p><h1 id="查找占用23456端口的进程"><a href="#查找占用23456端口的进程" class="headerlink" title="查找占用23456端口的进程"></a>查找占用23456端口的进程</h1><p>sudo lsof -i :23456</p><h1 id="杀死相关进程"><a href="#杀死相关进程" class="headerlink" title="杀死相关进程"></a>杀死相关进程</h1><p>sudo kill -9 <PID><br>apt</p><ol><li>进入目录<br>cd ~&#x2F;Downloads</li><li>用 apt 安装（首选）<br>sudo apt install .&#x2F;your-package.deb</li><li>如果报错则修复依赖<br>sudo apt –fix-broken install</li><li>验证安装<br>dpkg -l | grep package-name</li></ol><p>tree<br>安装<br>sudo apt-get install tree    # Ubuntu&#x2F;Debian 系统<br>brew install tree            # macOS<br>常见选项介绍</p><ol><li>-s 选项：显示文件大小<br>tree -s .</li><li>-h 选项：以人类可读的格式显示大小<br>tree -sh 2 .</li><li>-L 选项：限制显示层级<br>tree -L 2 .</li><li>-f 选项：显示完整路径<br>tree -f .</li><li>-a 选项：包括隐藏文件<br>tree -a .</li></ol><hr><p>tar</p><h1 id="解压分卷压缩的-feat-tar-gz-00-到-feat-tar-gz-31-文件"><a href="#解压分卷压缩的-feat-tar-gz-00-到-feat-tar-gz-31-文件" class="headerlink" title="解压分卷压缩的 feat.tar.gz.00 到 feat.tar.gz.31 文件"></a>解压分卷压缩的 feat.tar.gz.00 到 feat.tar.gz.31 文件</h1><p>cat feats.tar.gz.* | tar -xzvf -</p><p>PowerShell 更新</p><p>步骤一：检查当前版本<br>$PSVersionTable.PSVersion<br>步骤二：搜索最新版本的 PowerShell<br>winget search Microsoft.PowerShell<br>步骤三：安装新版本</p><h1 id="使用-Winget-安装-PowerShell"><a href="#使用-Winget-安装-PowerShell" class="headerlink" title="使用 Winget 安装 PowerShell"></a>使用 Winget 安装 PowerShell</h1><p>winget install –id Microsoft.Powershell –source winget</p><h1 id="使用-Winget-安装-PowerShell-预览版"><a href="#使用-Winget-安装-PowerShell-预览版" class="headerlink" title="使用 Winget 安装 PowerShell 预览版"></a>使用 Winget 安装 PowerShell 预览版</h1><p>winget install –id Microsoft.Powershell.Preview –source winget<br>步骤四：验证更新<br>$PSVersionTable.PSVersion</p><p>rsync<br>使用 rsync 进行文件传输时，目标路径的结尾斜杠不会影响传输行为，而源路径末尾是否有斜杠则会影响传输行为<br>源路径末尾有斜杠，如 zhao&#x2F;，会将源路径目录中的子文件递归传输到目标路径<br>源路径末尾无斜杠，如 zhao，会将源路径目录及其子文件递归传输到目标路径</p><h1 id="P：等价于-–partial-–progress"><a href="#P：等价于-–partial-–progress" class="headerlink" title="-P：等价于 –partial –progress"></a>-P：等价于 –partial –progress</h1><h1 id="–partial：保留部分传输的文件（实现断点续传）"><a href="#–partial：保留部分传输的文件（实现断点续传）" class="headerlink" title="–partial：保留部分传输的文件（实现断点续传）"></a>–partial：保留部分传输的文件（实现断点续传）</h1><h1 id="–progress：显示实时传输进度"><a href="#–progress：显示实时传输进度" class="headerlink" title="–progress：显示实时传输进度"></a>–progress：显示实时传输进度</h1><h1 id="a：归档模式（保留权限、时间戳等）"><a href="#a：归档模式（保留权限、时间戳等）" class="headerlink" title="-a：归档模式（保留权限、时间戳等）"></a>-a：归档模式（保留权限、时间戳等）</h1><h1 id="v：详细输出模式"><a href="#v：详细输出模式" class="headerlink" title="-v：详细输出模式"></a>-v：详细输出模式</h1><h1 id="z：压缩传输数据（节省带宽）"><a href="#z：压缩传输数据（节省带宽）" class="headerlink" title="-z：压缩传输数据（节省带宽）"></a>-z：压缩传输数据（节省带宽）</h1><h1 id="有斜杠"><a href="#有斜杠" class="headerlink" title="有斜杠"></a>有斜杠</h1><p>rsync -avzP –progress &#x2F;samsung&#x2F;zhao&#x2F; <a href="mailto:&#x75;&#101;&#115;&#114;&#x40;&#49;&#55;&#50;&#x2e;&#x31;&#55;&#x2e;&#x31;&#46;&#x32;&#50;&#56;">&#x75;&#101;&#115;&#114;&#x40;&#49;&#55;&#50;&#x2e;&#x31;&#55;&#x2e;&#x31;&#46;&#x32;&#50;&#56;</a>:&#x2F;home&#x2F;uesr&#x2F;zhao&#x2F;backup&#x2F;</p><h1 id="无斜杠"><a href="#无斜杠" class="headerlink" title="无斜杠"></a>无斜杠</h1><p>rsync -avzP –progress &#x2F;samsung&#x2F;zhao <a href="mailto:&#117;&#x65;&#x73;&#114;&#64;&#x31;&#55;&#x32;&#x2e;&#x31;&#x37;&#46;&#49;&#46;&#x32;&#50;&#x38;">&#117;&#x65;&#x73;&#114;&#64;&#x31;&#55;&#x32;&#x2e;&#x31;&#x37;&#46;&#49;&#46;&#x32;&#50;&#x38;</a>:&#x2F;home&#x2F;uesr&#x2F;zhao&#x2F;backup</p><p>du<br>❯ du -sh &#x2F;samsung&#x2F;zhao<br>1.4T    &#x2F;samsung&#x2F;zhao</p><p>❯ du -sh &#x2F;samsung&#x2F;zhao&#x2F;media_data<br>647G    &#x2F;samsung&#x2F;zhao&#x2F;media_data</p><p>❯ du -sh &#x2F;samsung&#x2F;zhao&#x2F;huggingface<br>72G     &#x2F;samsung&#x2F;zhao&#x2F;huggingface</p><p>❯ du -sh &#x2F;samsung&#x2F;zhao&#x2F;github<br>435G    &#x2F;samsung&#x2F;zhao&#x2F;github</p><p>update-alternatives</p><h1 id="update-alternatives-–install"><a href="#update-alternatives-–install" class="headerlink" title="update-alternatives: –install  &lt;链接&gt; &lt;名称&gt; &lt;路径&gt; &lt;优先级&gt;"></a>update-alternatives: –install  &lt;链接&gt; &lt;名称&gt; &lt;路径&gt; &lt;优先级&gt;</h1><p>sudo update-alternatives –install &#x2F;usr&#x2F;bin&#x2F;java java &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_202&#x2F;bin&#x2F;java 2</p><h1 id="查看已注册的备选方案"><a href="#查看已注册的备选方案" class="headerlink" title="查看已注册的备选方案"></a>查看已注册的备选方案</h1><p>update-alternatives –list java # 查看所有可选的 Java 版本</p><h1 id="或查看所有管理的命令"><a href="#或查看所有管理的命令" class="headerlink" title="或查看所有管理的命令:"></a>或查看所有管理的命令:</h1><p>update-alternatives –get-selections</p><h1 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h1><p>sudo update-alternatives –config java</p><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p>sudo update-alternatives –display cuda</p><h1 id="cuda"><a href="#cuda" class="headerlink" title="cuda"></a>cuda</h1><p>sudo update-alternatives –install &#x2F;usr&#x2F;local&#x2F;cuda cuda &#x2F;usr&#x2F;local&#x2F;cuda-12.4 50</p><h1 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h1><p>sudo update-alternatives –install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-12 2</p><h1 id="g"><a href="#g" class="headerlink" title="g++"></a>g++</h1><p>sudo update-alternatives –install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-11 1</p><p>Todesk 重启<br>sudo systemctl restart todeskd</p><p>安装 cudnn<br>tar -zxvf cudnn-10.1-linux-x64-v7.6.5.32.tgz</p><p>sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;<br>sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;<br>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h<br>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*<br>CUDA 版本管理</p><ul><li>方法一：使用update-alternatives（推荐）<br>这是最优雅的方式，可以系统级管理多个CUDA版本。</li></ul><ol><li>在 ~&#x2F;.bashrc 和 ~&#x2F;.zshrc 中添加下面的配置<br>export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin:$PATH<br>export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64:$LD_LIBRARY_PATH</li><li>首先为每个CUDA版本注册到alternatives系统：<br>sudo update-alternatives –install &#x2F;usr&#x2F;local&#x2F;cuda cuda &#x2F;usr&#x2F;local&#x2F;cuda-11.3 100<br>sudo update-alternatives –install &#x2F;usr&#x2F;local&#x2F;cuda cuda &#x2F;usr&#x2F;local&#x2F;cuda-10.2 50<br>这里的数字是优先级，数字越大优先级越高。</li><li>查看已注册的CUDA版本：<br>sudo update-alternatives –config cuda<br>你会看到类似这样的输出：<br>There are 2 choices for the alternative cuda (providing &#x2F;usr&#x2F;local&#x2F;cuda).<br>Selection    Path                 Priority   Status<br>0            &#x2F;usr&#x2F;local&#x2F;cuda-11.3   100       auto mode</li></ol><p>1            &#x2F;usr&#x2F;local&#x2F;cuda-10.2   50        manual mode   2            &#x2F;usr&#x2F;local&#x2F;cuda-11.3   100       manual mode<br>Press  to keep the current choice[*], or type selection number:<br>4. 输入对应的数字选择要使用的版本，然后按回车。<br>5. 验证当前CUDA版本<br>切换后，验证当前使用的CUDA版本：<br>nvcc –version<br>输出类似：<br>nvcc: NVIDIA (R) Cuda compiler<br>Copyright (c) 2005-2021 NVIDIA Corporation<br>Built on Sun_Mar_21_19:15:46_PDT_2021<br>Cuda compilation tools, release 11.3, V11.3.58<br>Build cuda_11.3.r11.3&#x2F;compiler.29745058_0<br>Ubuntu<br>&#x2F;dev&#x2F;nwme0n1p2: clean, 2439461&#x2F;97648640 files, 371046884&#x2F;390572032 blocks<br>解决 Linux 桌面问题思路分享 - 学习日记<br>ubuntu 黑屏 进入不了图形界面 dev&#x2F;sda1: clean, 552599&#x2F;6111232 files, 7119295&#x2F;24414464 blocks_ubuntu只有黑窗口-CSDN博客<br>Hexo<br>手把手教你搭建 Hexo 博客 - webfem<br>如何用Hexo搭建个人博客?<br>运行 Hexo 服务器<br>hexo server<br>hexo clean   # 清除缓存文件等<br>hexo g       # 生成页面<br>hexo s       # 启动预览</p><p>部署到 GitHub<br>hexo g   # 生成页面<br>hexo d   # 部署发布<br>安装 hexo-deployer-git<br>npm install hexo-deployer-git –save<br>修改 _config.yml</p><h1 id="修改-config-yml-文件末尾的-Deployment-部分"><a href="#修改-config-yml-文件末尾的-Deployment-部分" class="headerlink" title="修改 _config.yml 文件末尾的 Deployment 部分"></a>修改 _config.yml 文件末尾的 Deployment 部分</h1><p>deploy:<br>  type: git<br>  repository: <a href="mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>:用户名&#x2F;用户名.github.io.git<br>  branch: main<br><a href="https://yepingzhao.github.io/">https://YepingZhao.github.io</a><br>hexo new “My New Post”<br>hexo g &amp;&amp; hexo d<br>扩展及插件<br>添加文章的字数统计<br>下载插件：<br>npm install hexo-symbols-count-time –save<br>然后打开根目录的配置文件，复制粘贴以下内容：<br>symbols_count_time:</p><h1 id="每篇文章显示"><a href="#每篇文章显示" class="headerlink" title="每篇文章显示"></a>每篇文章显示</h1><p>  symbols: true<br>  time: true</p><h1 id="文章底部显示"><a href="#文章底部显示" class="headerlink" title="文章底部显示"></a>文章底部显示</h1><p>  totalsymbols: false<br>  totaltime: false</p><h1 id="是否统计代码块"><a href="#是否统计代码块" class="headerlink" title="是否统计代码块"></a>是否统计代码块</h1><p>  exclude_codeblock: false<br>  awl: 2<br>  wpm: 275<br>  suffix: “mins.”<br>XUI + x2rayN<br>一、访问 xray 面板<br>1、浏览器访问 xray 面板<br>浏览器输入网址访问 xray 面板<br>网址：<a href="http://66.112.218.20:21000/EduR/xui/">http://66.112.218.20:21000/EduR/xui/</a><br>[图片]</p><p>2、系统登录<br>输入用户名、密码登入系统。<br>用户名：admin<br>密码：admin123<br>[图片]</p><p>3、复制入站信息<br>选中左侧菜单栏中的 “入站列表”，选中其中任一入站URL，根据图示流程操作，复制入站URL信息。<br>[图片]<br>[图片]</p><p>二、x2rayN<br>1、导入入站 URL 信息<br>打开本地 x2rayN，根据图示流程操作，导入入站URL信息。<br>[图片]</p><p>2、启用服务器 URL<br>右键选中 x2rayN 列表中的服务器，单击 “设为活动服务器” 选项，观察到选中活动服务器切换为紫色背景，即服务器启用成功。可以打开浏览器访问油管（YouTube），验证服务是否成功启用。<br>[图片]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/02/hello-world/"/>
    <url>/2025/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
